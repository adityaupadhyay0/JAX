#pragma once

#include "tensor.h"
#include <string>
#include <vector>
#include <functional>

namespace axe {
namespace jit {

// Define the function pointer type for our dynamically compiled functions.
// The signature must match the function generated by CodeGenerator.
using CompiledFunction = Tensor(*)(const std::vector<Tensor>&);

/**
 * @class DynamicCompiler
 * @brief Compiles C++ source code into a shared library and loads it dynamically.
 *
 * This class orchestrates the just-in-time compilation by taking a string
 * of C++ code, invoking the system's C++ compiler to build a shared library,
 * and then loading that library into the current process for execution.
 */
class DynamicCompiler {
public:
    DynamicCompiler();
    ~DynamicCompiler();

    /**
     * @brief Compiles the given C++ source string and loads the specified function.
     * @param source_code The C++ source code to compile.
     * @param function_name The name of the function to load from the compiled library.
     * @return A handle to the dynamically loaded function, or nullptr on failure.
     */
    CompiledFunction compile_and_load(const std::string& source_code, const std::string& function_name);

private:
    // Keep track of loaded library handles so we can unload them in the destructor.
    std::vector<void*> loaded_handles_;
};

} // namespace jit
} // namespace axe